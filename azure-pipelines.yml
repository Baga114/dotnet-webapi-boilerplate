trigger:
- main

pool:
  vmImage: 'windows-latest'  # Use a Windows agent pool

variables:
  - group: soar-login2
  - name: acrServiceConnection
    value: 'acr-connection'
  - name: sonarServiceConnection
    value: 'sonar-connection'
  - name: aksServiceConnection
    value: 'aks-connection'

stages:
- stage: Analysis
  jobs:
  - job: AnalysisJob
    displayName: 'Run Analysis'
    steps:
    - checkout: self

    # SonarQube Prepare Analysis Configuration
    - task: SonarQubePrepare@4
      inputs:
        SonarQube: '$(sonarServiceConnection)'
        scannerMode: 'MSBuild'
        projectKey: '$(ProjectName)'  # Replace with your project key
        projectName: '$(ProjectName)'  # Replace with your project name

- stage: SonarQualityGateCheck
  jobs:
  - job: SonarQualityGateCheckJob
    displayName: 'Sonar Quality Gate Check'
    steps:
    - checkout: self

    # Run SonarQube quality gate check using Bash script
    - powershell: |
        $base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(("$(username):$(password)")))
        $projectKey = "$(ProjectName)"  # Replace with your project key
        $branch = "main"
        $apiUrl = "http://20.15.204.13:9000/api/qualitygates/project_status?projectKey=$projectKey&branch=$branch"

        $result = Invoke-RestMethod -Uri $apiUrl -Headers @{Authorization=("Basic {0}" -f $base64AuthInfo)}

        if ($result.projectStatus.status -eq "OK") {
            Write-Host "Quality Gate Succeeded"
        } else {
            Write-Host "Quality gate failed"
            exit 1
        }
      env:
        username: $(username)
        password: $(password)

- stage: BuildAndPush
  displayName: 'Build and Push to ACR'
  jobs:
  - job: Build
    displayName: 'Build and Push'
    steps:
    - checkout: self

    # Add your .NET build steps here

    - task: Docker@2
      displayName: 'Build and push Docker image'
      inputs:
        command: 'buildAndPush'
        containerRegistry: '$(AcrServiceConnection)'
        repository: 'testing23'
        Dockerfile: '$(Build.SourcesDirectory)/Dockerfile'
        tags: |
          $(Build.BuildId)

    - task: CopyFiles@2
      displayName: 'Copy Files to: drop'
      inputs:
        SourceFolder: deployment
        Contents: deployment.yaml
        TargetFolder: drop
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: drop'
      inputs:
        PathtoPublish: deployment/deployment.yaml
